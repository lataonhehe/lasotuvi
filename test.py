from lasotuvi.App import lapDiaBan
from lasotuvi.DiaBan import diaBan
from lasotuvi.ThienBan import lapThienBan
from lasotuvi.AmDuong import diaChi, thienCan

# ANSI color codes for better visualization
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    MAGENTA = '\033[95m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

def get_ngu_hanh_color(ngu_hanh):
    """Get color based on ng≈© h√†nh"""
    ngu_hanh_colors = {
        'K': Colors.YELLOW,  # Kim - V√†ng
        'M': Colors.GREEN,    # M·ªôc - Xanh l√°
        'T': Colors.CYAN,     # Th·ªßy - Xanh d∆∞∆°ng
        'H': Colors.RED,      # H·ªèa - ƒê·ªè
        'O': Colors.MAGENTA   # Th·ªï - T√≠m
    }
    return ngu_hanh_colors.get(ngu_hanh, Colors.END)

def print_header(title):
    """Print a beautiful header"""
    print(f"\n{Colors.BOLD}{Colors.CYAN}{'='*80}")
    print(f"{'='*20} {title} {'='*20}")
    print(f"{'='*80}{Colors.END}\n")

def print_section(title, color=Colors.BLUE):
    """Print a section header"""
    print(f"\n{color}{Colors.BOLD}üìã {title}{Colors.END}")
    print(f"{color}{'‚îÄ' * 60}{Colors.END}")

def print_info(label, value, color=Colors.GREEN):
    """Print information with consistent formatting"""
    print(f"   {Colors.BOLD}{label}:{Colors.END} {color}{value}{Colors.END}")

def print_cung_info(cung_num, ten_cung, cung_ten, chinh_tinh, phu_tinh, dac_biet=None):
    """Print cung information with better formatting"""
    # Format palace name with special indicators inline
    palace_display = f"{Colors.CYAN}{ten_cung:10s}{Colors.END}"
    if dac_biet:
        special_indicators = f" [{Colors.RED}{', '.join(dac_biet)}{Colors.END}]"
        palace_display += special_indicators
    
    print(f"   {Colors.YELLOW}Cung {cung_num:2d}{Colors.END} ({palace_display}): {Colors.GREEN}{cung_ten:8s}{Colors.END}")
    if not chinh_tinh:
        chinh_tinh.append("V√¥ ch√≠nh di·ªáu")
    print(f"           {Colors.BLUE}Ch√≠nh tinh:{Colors.END} {', '.join(chinh_tinh)}")
    if phu_tinh:
        print(f"           {Colors.CYAN}Ph·ª• tinh:{Colors.END} {', '.join(phu_tinh)}")

def format_star_with_color(star_info):
    """Format star with ng≈© h√†nh color"""
    if isinstance(star_info, dict):
        star_name = star_info.get('saoTen', '')
        star_ngu_hanh = star_info.get('saoNguHanh', '')
        star_dac_tinh = star_info.get('saoDacTinh', '')
        
        color = get_ngu_hanh_color(star_ngu_hanh)
        formatted_name = f"{color}{star_name}{Colors.END}"
        
        if star_dac_tinh:
            formatted_name += f"({star_dac_tinh})"
        
        return formatted_name
    return str(star_info)

def inLaSoTuViTongHop(ngay, thang, nam, gio, gioiTinh, ten, duongLich=True, timeZone=7):
    """
    T·∫°o v√† in l√° s·ªë t·ª≠ vi t·ªïng h·ª£p v·ªõi th√¥ng tin quan tr·ªçng nh·∫•t
    """
    print_header("L√Å S·ªê T·ª¨ VI T·ªîNG H·ª¢P")
    
    try:
        # T·∫°o ƒë·ªãa b√†n v√† thi√™n b√†n
        diaban = lapDiaBan(diaBan, nn=ngay, tt=thang, nnnn=nam, gioSinh=gio, gioiTinh=gioiTinh, duongLich=duongLich, timeZone=timeZone)
        thienban = lapThienBan(ngay, thang, nam, gio, gioiTinh, ten, diaban, duongLich, timeZone)
        
        # Th√¥ng tin c√° nh√¢n
        print_section("TH√îNG TIN C√Å NH√ÇN", Colors.CYAN)
        print_info("H·ªç t√™n", ten)
        print_info("Ng√†y sinh", f"{ngay}/{thang}/{nam}")
        print_info("Gi·ªù sinh", f"{gio} gi·ªù")
        print_info("Gi·ªõi t√≠nh", 'Nam' if gioiTinh == 1 else 'N·ªØ')
        print_info("Can Chi gi·ªù sinh", thienban.gioSinh)
        
        # Th√¥ng tin can chi
        print_section("TH√îNG TIN CAN CHI", Colors.BLUE)
        print_info("Can Chi nƒÉm", f"{thienban.canNamTen} {thienban.chiNamTen}")
        print_info("Can Chi th√°ng", f"{thienban.canThangTen} {thienban.chiThangTen}")
        print_info("Can Chi ng√†y", f"{thienban.canNgayTen} {thienban.chiNgayTen}")
        print_info("Can Chi gi·ªù", f"{thienban.canGioSinh['tenCan']} {thienban.chiGioSinh['tenChi']}")
        
        # Th√¥ng tin m·ªánh
        print_section("TH√îNG TIN M·ªÜNH", Colors.YELLOW)
        print_info("B·∫£n m·ªánh", thienban.banMenh)
        print_info("M·ªánh ch·ªß", thienban.menhChu)
        print_info("Th√¢n ch·ªß", thienban.thanChu)
        print_info("Sinh kh·∫Øc", thienban.sinhKhac)
        print_info("√Çm d∆∞∆°ng m·ªánh", thienban.amDuongMenh)
        
        # Th√¥ng tin c·ª•c
        print_section("TH√îNG TIN C·ª§C", Colors.GREEN)
        print_info("H√†nh c·ª•c", str(thienban.hanhCuc))
        print_info("T√™n c·ª•c", thienban.tenCuc)
        
        # In chi ti·∫øt t·ª´ng cung ƒë·ªãa b√†n v·ªõi ch√≠nh tinh v√† ph·ª• tinh
        print_section("CHI TI·∫æT 12 CUNG ƒê·ªäA B√ÄN (CH√çNH TINH & PH·ª§ TINH)", Colors.RED)
        
        for i in range(1, 13):
            cung = diaban.thapNhiCung[i]
            # T√°ch ch√≠nh tinh (saoLoai = 1) v√† ph·ª• tinh (c√°c sao kh√°c)
            chinhTinh = []
            phuTinh = []
            if cung.cungSao:
                for sao in cung.cungSao:
                    try:
                        if isinstance(sao, dict) and 'saoTen' in sao:
                            # Format star with ng≈© h√†nh color
                            formatted_star = format_star_with_color(sao)
                            
                            # Ph√¢n lo·∫°i theo saoLoai
                            if sao.get('saoLoai', 0) == 1:
                                chinhTinh.append(formatted_star)
                            else:
                                phuTinh.append(formatted_star)
                    except:
                        pass
            
            # Th√¥ng tin ƒë·∫∑c bi·ªát c·ªßa cung
            dacBiet = []
            if hasattr(cung, 'cungThan') and cung.cungThan:
                dacBiet.append("Th√¢n")
            if hasattr(cung, 'tuanTrung') and cung.tuanTrung:
                dacBiet.append("Tu·∫ßn")
            if hasattr(cung, 'trietLo') and cung.trietLo:
                dacBiet.append("Tri·ªát")
            
            # In th√¥ng tin cung v·ªõi formatting m·ªõi
            print_cung_info(i, cung.tenCungChu, cung.cungTen, chinhTinh, phuTinh, dacBiet)
            
        
        # Th√¥ng tin ƒë·∫°i h·∫°n v√† ti·ªÉu h·∫°n
        # print_section("TH√îNG TIN H·∫†N", Colors.CYAN)
        # for i in range(1, 13):
        #     cung = diaban.thapNhiCung[i]
        #     if hasattr(cung, 'cungDaiHan'):
        #         print_info(f"Cung {i} - ƒê·∫°i h·∫°n", str(cung.cungDaiHan))
        #     if hasattr(cung, 'cungTieuHan'):
        #         print_info(f"Cung {i} - Ti·ªÉu h·∫°n", cung.cungTieuHan)
        
        
        print(f"\n{Colors.BOLD}{Colors.GREEN}{'‚ïê' * 80}")
        print(f"{'‚ïê' * 20} K·∫æT TH√öC L√Å S·ªê T·ªîNG H·ª¢P {'‚ïê' * 20}")
        print(f"{'‚ïê' * 80}{Colors.END}")
        
    except Exception as e:
        print(f"{Colors.RED}‚ùå L·ªói khi t·∫°o l√° s·ªë: {e}{Colors.END}")
        import traceback
        traceback.print_exc()

def inLaSoTuViNganGon(ngay, thang, nam, gio, gioiTinh, ten, duongLich=True, timeZone=7):
    """
    T·∫°o v√† in l√° s·ªë t·ª≠ vi ng·∫Øn g·ªçn v·ªõi th√¥ng tin c∆° b·∫£n
    """
    print_header("L√Å S·ªê T·ª¨ VI NG·∫ÆN G·ªåN")
    
    try:
        # T·∫°o ƒë·ªãa b√†n v√† thi√™n b√†n
        diaban = lapDiaBan(diaBan, nn=ngay, tt=thang, nnnn=nam, gioSinh=gio, gioiTinh=gioiTinh, duongLich=duongLich, timeZone=timeZone)
        thienban = lapThienBan(ngay, thang, nam, gio, gioiTinh, ten, diaban, duongLich, timeZone)
        
        # Th√¥ng tin c∆° b·∫£n
        print_section("TH√îNG TIN C∆† B·∫¢N", Colors.CYAN)
        print_info("Th√¥ng tin", f"{ten} - {ngay}/{thang}/{nam} - {gio} gi·ªù - {'Nam' if gioiTinh == 1 else 'N·ªØ'}")
        print_info("M·ªánh", f"{thienban.banMenh} - {thienban.tenCuc} - {thienban.sinhKhac}")
        print_info("Can Chi", f"{thienban.canNamTen} {thienban.chiNamTen} - {thienban.canThangTen} {thienban.chiThangTen} - {thienban.canNgayTen} {thienban.chiNgayTen} - {thienban.gioSinh}")
        
        # 12 cung v·ªõi ch√≠nh tinh v√† ph·ª• tinh
        print_section("12 CUNG ƒê·ªäA B√ÄN", Colors.BLUE)
        
        for i in range(1, 13):
            cung = diaban.thapNhiCung[i]
            chinhTinh = []
            phuTinh = []
            if cung.cungSao:
                for sao in cung.cungSao:
                    if isinstance(sao, dict) and 'saoTen' in sao:
                        # Format star with ng≈© h√†nh color
                        formatted_star = format_star_with_color(sao)
                        
                        # Ph√¢n lo·∫°i theo saoLoai
                        if sao.get('saoLoai', 0) == 1:
                            chinhTinh.append(formatted_star)
                        else:
                            phuTinh.append(formatted_star)
            
            print_cung_info(i, cung.getTenCungChu(), cung.cungTen, chinhTinh, phuTinh)
        
        print(f"\n{Colors.BOLD}{Colors.GREEN}{'‚ïê' * 80}")
        print(f"{'‚ïê' * 20} K·∫æT TH√öC L√Å S·ªê NG·∫ÆN G·ªåN {'‚ïê' * 20}")
        print(f"{'‚ïê' * 80}{Colors.END}")
        
    except Exception as e:
        print(f"{Colors.RED}‚ùå L·ªói khi t·∫°o l√° s·ªë ng·∫Øn g·ªçn: {e}{Colors.END}")
        import traceback
        traceback.print_exc()

def test_inLaSoTuViNganGon():
    test_cases = [
        {
            'ngay': 7,
            'thang': 3, 
            'nam': 2003,
            'gio': 6,
            'gioiTinh': 1,
            'ten': "Nguy·ªÖn VƒÉn A",
            'duongLich': True,
            'timeZone': 7
        },
        {
            'ngay': 30,
            'thang': 7,
            'nam': 2005, 
            'gio': 22,
            'gioiTinh': -1,
            'ten': "Nguy·ªÖn Th·ªã B",
            'duongLich': True,
            'timeZone': 7
        }
    ]

    for test in test_cases:
        try:
            print(f"\nTesting with data: {test}")
            inLaSoTuViTongHop(
                test['ngay'],
                test['thang'], 
                test['nam'],
                test['gio'],
                test['gioiTinh'],
                test['ten'],
                test['duongLich'],
                test['timeZone']
            )
            print("‚úì Test passed")
        except Exception as e:
            print(f"‚úó Test failed: {str(e)}")

def test_palace_names():
    """
    Test function to show palace names in thapNhiCung
    """
    try:
        # Create a test case
        ngay, thang, nam, gio, gioiTinh = 7, 3, 2003, 6, 1
        ten = "Nguy·ªÖn VƒÉn A"
        
        # Create diaBan
        diaban = lapDiaBan(diaBan, nn=ngay, tt=thang, nnnn=nam, gioSinh=gio, 
                           gioiTinh=gioiTinh, duongLich=True, timeZone=7)
        
        print_header("TH·∫¨P NH·ªä CUNG V·ªöI T√äN CUNG")
        print_section("12 CUNG ƒê·ªäA B√ÄN", Colors.BLUE)
        
        tenCung = ["", "M·ªánh", "Ph·ª• m·∫´u", "Ph√∫c ƒë·ª©c", "ƒêi·ªÅn tr·∫°ch", "Quan l·ªôc", 
                    "N√¥ b·ªôc", "Thi√™n di", "T·∫≠t √°ch", "T√†i b·∫°ch", "T·ª≠ t·ª©c", "Phu th√™", "Huynh ƒë·ªá"]
        
        for i in range(1, 13):
            cung = diaban.thapNhiCung[i]
            palace_name = cung.getTenCungChu()
            print(f"   {Colors.YELLOW}Cung {i:2d}{Colors.END}: {Colors.CYAN}{cung.cungTen:8s}{Colors.END} - {Colors.GREEN}{palace_name}{Colors.END}")
        
        print(f"\n{Colors.BOLD}{Colors.GREEN}{'‚ïê' * 80}")
        print(f"{'‚ïê' * 20} K·∫æT TH√öC TEST T√äN CUNG {'‚ïê' * 20}")
        print(f"{'‚ïê' * 80}{Colors.END}")
        
    except Exception as e:
        print(f"{Colors.RED}‚ùå L·ªói khi test t√™n cung: {e}{Colors.END}")
        import traceback
        traceback.print_exc()

test_inLaSoTuViNganGon()
# test_palace_names()