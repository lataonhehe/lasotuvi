from lasotuvi.App import lapDiaBan
from lasotuvi.DiaBan import diaBan
from lasotuvi.ThienBan import lapThienBan
from lasotuvi.AmDuong import diaChi, thienCan

# ANSI color codes for better visualization
class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    CYAN = '\033[96m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    MAGENTA = '\033[95m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'
    END = '\033[0m'

def get_ngu_hanh_color(ngu_hanh):
    """Get color based on ng≈© h√†nh"""
    ngu_hanh_colors = {
        'K': Colors.YELLOW,  # Kim - V√†ng
        'M': Colors.GREEN,    # M·ªôc - Xanh l√°
        'T': Colors.CYAN,     # Th·ªßy - Xanh d∆∞∆°ng
        'H': Colors.RED,      # H·ªèa - ƒê·ªè
        'O': Colors.MAGENTA   # Th·ªï - T√≠m
    }
    return ngu_hanh_colors.get(ngu_hanh, Colors.END)

def print_header(title):
    """Print a beautiful header"""
    print(f"\n{Colors.BOLD}{Colors.CYAN}{'='*80}")
    print(f"{'='*20} {title} {'='*20}")
    print(f"{'='*80}{Colors.END}\n")

def print_section(title, color=Colors.BLUE):
    """Print a section header"""
    print(f"\n{color}{Colors.BOLD}üìã {title}{Colors.END}")
    print(f"{color}{'‚îÄ' * 60}{Colors.END}")

def print_info(label, value, color=Colors.GREEN):
    """Print information with consistent formatting"""
    print(f"   {Colors.BOLD}{label}:{Colors.END} {color}{value}{Colors.END}")

def print_cung_info(cung_num, ten_cung, cung_ten, chinh_tinh, phu_tinh, dac_biet=None):
    """Print cung information with better formatting"""
    # Format palace name with special indicators inline
    palace_display = f"{Colors.CYAN}{ten_cung:10s}{Colors.END}"
    if dac_biet:
        special_indicators = f" [{Colors.RED}{', '.join(dac_biet)}{Colors.END}]"
        palace_display += special_indicators
    
    print(f"   {Colors.YELLOW}Cung {cung_num:2d}{Colors.END} ({palace_display}): {Colors.GREEN}{cung_ten:8s}{Colors.END}")
    if not chinh_tinh:
        chinh_tinh.append("V√¥ ch√≠nh di·ªáu")
    print(f"           {Colors.BLUE}Ch√≠nh tinh:{Colors.END} {', '.join(chinh_tinh)}")
    if phu_tinh:
        print(f"           {Colors.CYAN}Ph·ª• tinh:{Colors.END} {', '.join(phu_tinh)}")

def format_star_with_color(star_info):
    """Format star with ng≈© h√†nh color"""
    if isinstance(star_info, dict):
        star_name = star_info.get('saoTen', '')
        star_ngu_hanh = star_info.get('saoNguHanh', '')
        star_dac_tinh = star_info.get('saoDacTinh', '')
        
        color = get_ngu_hanh_color(star_ngu_hanh)
        formatted_name = f"{color}{star_name}{Colors.END}"
        
        if star_dac_tinh:
            formatted_name += f"({star_dac_tinh})"
        
        return formatted_name
    return str(star_info)

def tao_la_so_tu_vi(ngay, thang, nam, gio, gioiTinh, ten, duongLich=True, timeZone=7):
    """
    T·∫°o v√† in l√° s·ªë t·ª≠ vi t·ªïng h·ª£p v·ªõi th√¥ng tin quan tr·ªçng nh·∫•t
    
    Args:
        ngay (int): Ng√†y sinh
        thang (int): Th√°ng sinh  
        nam (int): NƒÉm sinh
        gio (int): Gi·ªù sinh
        gioiTinh (int): Gi·ªõi t√≠nh (1: Nam, -1: N·ªØ)
        ten (str): H·ªç t√™n
        duongLich (bool): True n·∫øu l√† d∆∞∆°ng l·ªãch, False n·∫øu √¢m l·ªãch
        timeZone (int): M√∫i gi·ªù
    
    Returns:
        dict: K·∫øt qu·∫£ l√° s·ªë t·ª≠ vi v·ªõi c√°c th√¥ng tin ch√≠nh
    """
    try:
        # T·∫°o ƒë·ªãa b√†n v√† thi√™n b√†n
        diaban = lapDiaBan(diaBan, nn=ngay, tt=thang, nnnn=nam, gioSinh=gio, gioiTinh=gioiTinh, duongLich=duongLich, timeZone=timeZone)
        thienban = lapThienBan(ngay, thang, nam, gio, gioiTinh, ten, diaban, duongLich, timeZone)
        
        # In header
        # print_header("L√Å S·ªê T·ª¨ VI T·ªîNG H·ª¢P")
        
        # # Th√¥ng tin c√° nh√¢n
        # print_section("TH√îNG TIN C√Å NH√ÇN", Colors.CYAN)
        # print_info("H·ªç t√™n", ten)
        # print_info("Ng√†y sinh", f"{ngay}/{thang}/{nam}")
        # print_info("Gi·ªù sinh", f"{gio} gi·ªù")
        # print_info("Gi·ªõi t√≠nh", 'Nam' if gioiTinh == 1 else 'N·ªØ')
        # print_info("Can Chi gi·ªù sinh", thienban.gioSinh)
        
        # # Th√¥ng tin can chi
        # print_section("TH√îNG TIN CAN CHI", Colors.BLUE)
        # print_info("Can Chi nƒÉm", f"{thienban.canNamTen} {thienban.chiNamTen}")
        # print_info("Can Chi th√°ng", f"{thienban.canThangTen} {thienban.chiThangTen}")
        # print_info("Can Chi ng√†y", f"{thienban.canNgayTen} {thienban.chiNgayTen}")
        # print_info("Can Chi gi·ªù", f"{thienban.canGioSinh['tenCan']} {thienban.chiGioSinh['tenChi']}")
        
        # # Th√¥ng tin m·ªánh
        # print_section("TH√îNG TIN M·ªÜNH", Colors.YELLOW)
        # print_info("B·∫£n m·ªánh", thienban.banMenh)
        # print_info("M·ªánh ch·ªß", thienban.menhChu)
        # print_info("Th√¢n ch·ªß", thienban.thanChu)
        # print_info("Sinh kh·∫Øc", thienban.sinhKhac)
        # print_info("√Çm d∆∞∆°ng m·ªánh", thienban.amDuongMenh)
        
        # # Th√¥ng tin c·ª•c
        # print_section("TH√îNG TIN C·ª§C", Colors.GREEN)
        # print_info("H√†nh c·ª•c", str(thienban.hanhCuc))
        # print_info("T√™n c·ª•c", thienban.tenCuc)
        
        # # In chi ti·∫øt t·ª´ng cung ƒë·ªãa b√†n v·ªõi ch√≠nh tinh v√† ph·ª• tinh
        # print_section("CHI TI·∫æT 12 CUNG ƒê·ªäA B√ÄN (CH√çNH TINH & PH·ª§ TINH)", Colors.RED)
        
        # T·∫°o k·∫øt qu·∫£ tr·∫£ v·ªÅ
        ket_qua = {
            'thong_tin_ca_nhan': {
                'ho_ten': ten,
                'ngay_sinh': f"{ngay}/{thang}/{nam}",
                'gio_sinh': f"{gio} gi·ªù",
                'gioi_tinh': 'Nam' if gioiTinh == 1 else 'N·ªØ',
                'can_chi_gio_sinh': thienban.gioSinh
            },
            'can_chi': {
                'can_chi_nam': f"{thienban.canNamTen} {thienban.chiNamTen}",
                'can_chi_thang': f"{thienban.canThangTen} {thienban.chiThangTen}",
                'can_chi_ngay': f"{thienban.canNgayTen} {thienban.chiNgayTen}",
                'can_chi_gio': f"{thienban.canGioSinh['tenCan']} {thienban.chiGioSinh['tenChi']}"
            },
            'menh': {
                'ban_menh': thienban.banMenh,
                'menh_chu': thienban.menhChu,
                'than_chu': thienban.thanChu,
                'sinh_khac': thienban.sinhKhac,
                'am_duong_menh': thienban.amDuongMenh
            },
            'cuc': {
                'hanh_cuc': str(thienban.hanhCuc),
                'ten_cuc': thienban.tenCuc
            },
            'thap_nhi_cung': []
        }
        
        for i in range(1, 13):
            cung = diaban.thapNhiCung[i]
            # T√°ch ch√≠nh tinh (saoLoai = 1) v√† ph·ª• tinh (c√°c sao kh√°c)
            chinhTinh = []
            phuTinh = []
            if cung.cungSao:
                for sao in cung.cungSao:
                    try:
                        if isinstance(sao, dict) and 'saoTen' in sao:
                            # Format star with ng≈© h√†nh color
                            formatted_star = format_star_with_color(sao)
                            
                            # Ph√¢n lo·∫°i theo saoLoai
                            if sao.get('saoLoai', 0) == 1:
                                chinhTinh.append(formatted_star)
                            else:
                                phuTinh.append(formatted_star)
                    except:
                        pass
            
            # Th√¥ng tin ƒë·∫∑c bi·ªát c·ªßa cung
            dacBiet = []
            if hasattr(cung, 'cungThan') and cung.cungThan:
                dacBiet.append("Th√¢n")
            if hasattr(cung, 'tuanTrung') and cung.tuanTrung:
                dacBiet.append("Tu·∫ßn")
            if hasattr(cung, 'trietLo') and cung.trietLo:
                dacBiet.append("Tri·ªát")
            
            # # In th√¥ng tin cung v·ªõi formatting m·ªõi
            # print_cung_info(i, cung.tenCungChu, cung.cungTen, chinhTinh, phuTinh, dacBiet)
            
            # Th√™m v√†o k·∫øt qu·∫£
            ket_qua['thap_nhi_cung'].append({
                'cung_so': i,
                'ten_cung': cung.tenCungChu,
                'cung_ten': cung.cungTen,
                'chinh_tinh': chinhTinh,
                'phu_tinh': phuTinh,
                'dac_biet': dacBiet
            })
        
        # print(f"\n{Colors.BOLD}{Colors.GREEN}{'‚ïê' * 80}")
        # print(f"{'‚ïê' * 20} K·∫æT TH√öC L√Å S·ªê T·ªîNG H·ª¢P {'‚ïê' * 20}")
        # print(f"{'‚ïê' * 80}{Colors.END}")
        
        return ket_qua
        
    except Exception as e:
        print(f"{Colors.RED}‚ùå L·ªói khi t·∫°o l√° s·ªë: {e}{Colors.END}")
        import traceback
        traceback.print_exc()
        return None

def tao_la_so_tu_vi_ngan_gon(ngay, thang, nam, gio, gioiTinh, ten, duongLich=True, timeZone=7):
    """
    T·∫°o v√† in l√° s·ªë t·ª≠ vi ng·∫Øn g·ªçn v·ªõi th√¥ng tin c∆° b·∫£n
    
    Args:
        ngay (int): Ng√†y sinh
        thang (int): Th√°ng sinh  
        nam (int): NƒÉm sinh
        gio (int): Gi·ªù sinh
        gioiTinh (int): Gi·ªõi t√≠nh (1: Nam, -1: N·ªØ)
        ten (str): H·ªç t√™n
        duongLich (bool): True n·∫øu l√† d∆∞∆°ng l·ªãch, False n·∫øu √¢m l·ªãch
        timeZone (int): M√∫i gi·ªù
    
    Returns:
        dict: K·∫øt qu·∫£ l√° s·ªë t·ª≠ vi ng·∫Øn g·ªçn
    """
    try:
        # T·∫°o ƒë·ªãa b√†n v√† thi√™n b√†n
        diaban = lapDiaBan(diaBan, nn=ngay, tt=thang, nnnn=nam, gioSinh=gio, gioiTinh=gioiTinh, duongLich=duongLich, timeZone=timeZone)
        thienban = lapThienBan(ngay, thang, nam, gio, gioiTinh, ten, diaban, duongLich, timeZone)
        
        # In header
        print_header("L√Å S·ªê T·ª¨ VI NG·∫ÆN G·ªåN")
        
        # Th√¥ng tin c∆° b·∫£n
        print_section("TH√îNG TIN C∆† B·∫¢N", Colors.CYAN)
        print_info("Th√¥ng tin", f"{ten} - {ngay}/{thang}/{nam} - {gio} gi·ªù - {'Nam' if gioiTinh == 1 else 'N·ªØ'}")
        print_info("M·ªánh", f"{thienban.banMenh} - {thienban.tenCuc} - {thienban.sinhKhac}")
        print_info("Can Chi", f"{thienban.canNamTen} {thienban.chiNamTen} - {thienban.canThangTen} {thienban.chiThangTen} - {thienban.canNgayTen} {thienban.chiNgayTen} - {thienban.gioSinh}")
        
        # T·∫°o k·∫øt qu·∫£ tr·∫£ v·ªÅ
        ket_qua = {
            'thong_tin_co_ban': {
                'ho_ten': ten,
                'ngay_sinh': f"{ngay}/{thang}/{nam}",
                'gio_sinh': f"{gio} gi·ªù",
                'gioi_tinh': 'Nam' if gioiTinh == 1 else 'N·ªØ'
            },
            'menh': {
                'ban_menh': thienban.banMenh,
                'ten_cuc': thienban.tenCuc,
                'sinh_khac': thienban.sinhKhac
            },
            'can_chi': {
                'can_chi_nam': f"{thienban.canNamTen} {thienban.chiNamTen}",
                'can_chi_thang': f"{thienban.canThangTen} {thienban.chiThangTen}",
                'can_chi_ngay': f"{thienban.canNgayTen} {thienban.chiNgayTen}",
                'can_chi_gio': thienban.gioSinh
            },
            'thap_nhi_cung': []
        }
        
        # 12 cung v·ªõi ch√≠nh tinh v√† ph·ª• tinh
        print_section("12 CUNG ƒê·ªäA B√ÄN", Colors.BLUE)
        
        for i in range(1, 13):
            cung = diaban.thapNhiCung[i]
            chinhTinh = []
            phuTinh = []
            if cung.cungSao:
                for sao in cung.cungSao:
                    if isinstance(sao, dict) and 'saoTen' in sao:
                        # Format star with ng≈© h√†nh color
                        formatted_star = format_star_with_color(sao)
                        
                        # Ph√¢n lo·∫°i theo saoLoai
                        if sao.get('saoLoai', 0) == 1:
                            chinhTinh.append(formatted_star)
                        else:
                            phuTinh.append(formatted_star)
            
            print_cung_info(i, cung.getTenCungChu(), cung.cungTen, chinhTinh, phuTinh)
            
            # Th√™m v√†o k·∫øt qu·∫£
            ket_qua['thap_nhi_cung'].append({
                'cung_so': i,
                'ten_cung': cung.getTenCungChu(),
                'cung_ten': cung.cungTen,
                'chinh_tinh': chinhTinh,
                'phu_tinh': phuTinh
            })
        
        print(f"\n{Colors.BOLD}{Colors.GREEN}{'‚ïê' * 80}")
        print(f"{'‚ïê' * 20} K·∫æT TH√öC L√Å S·ªê NG·∫ÆN G·ªåN {'‚ïê' * 20}")
        print(f"{'‚ïê' * 80}{Colors.END}")
        
        return ket_qua
        
    except Exception as e:
        print(f"{Colors.RED}‚ùå L·ªói khi t·∫°o l√° s·ªë ng·∫Øn g·ªçn: {e}{Colors.END}")
        import traceback
        traceback.print_exc()
        return None

# V√≠ d·ª• s·ª≠ d·ª•ng
if __name__ == "__main__":
    # Test case 1
    print("=== TEST CASE 1 ===")
    ket_qua_1 = tao_la_so_tu_vi(
        ngay=7, thang=3, nam=2003, gio=6, 
        gioiTinh=1, ten="Nguy·ªÖn VƒÉn A"
    )
    
    print("\n" + "="*50 + "\n")
    
    # Test case 2  
    print("=== TEST CASE 2 ===")
    ket_qua_2 = tao_la_so_tu_vi_ngan_gon(
        ngay=30, thang=7, nam=2005, gio=22,
        gioiTinh=-1, ten="Nguy·ªÖn Th·ªã B"
    )
